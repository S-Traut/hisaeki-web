import {
  Fragment,
  createElementBlock,
  createTextVNode,
  defineComponent,
  nextTick,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  ref,
  renderList,
  renderSlot,
  toDisplayString,
  toRefs,
  unref,
  watch
} from "./chunk-G4DFXOZZ.js";
import "./chunk-RSJERJUL.js";

// node_modules/@yeger/vue-masonry-wall/dist/index.mjs
var N = ["data-index"];
var U = defineComponent({
  __name: "masonry-wall",
  props: {
    columnWidth: { default: 400 },
    items: {},
    gap: { default: 0 },
    rtl: { type: Boolean, default: false },
    ssrColumns: { default: 0 },
    scrollContainer: { default: null },
    keyMapper: { type: Function, default: (o, c, h, v) => v }
  },
  emits: ["redraw", "redrawSkip"],
  setup(o, { emit: c }) {
    const h = o, { columnWidth: v, items: r, gap: i, rtl: _, ssrColumns: y, scrollContainer: g, keyMapper: W } = toRefs(h), d = ref([]), f = ref();
    function k() {
      const e = Math.floor(
        (f.value.getBoundingClientRect().width + i.value) / (v.value + i.value)
      );
      return e > 0 ? e : 1;
    }
    function C(e) {
      return [...new Array(e)].map(() => []);
    }
    if (y.value > 0) {
      const e = C(y.value);
      r.value.forEach(
        (t, l) => e[l % y.value].push(l)
      ), d.value = e;
    }
    async function x(e) {
      if (e >= r.value.length)
        return;
      await nextTick();
      const t = [...f.value.children];
      _.value && t.reverse();
      const l = t.reduce(
        (a, n) => n.getBoundingClientRect().height < a.getBoundingClientRect().height ? n : a
      );
      d.value[+l.dataset.index].push(e), await x(e + 1);
    }
    async function w(e = false) {
      if (d.value.length === k() && !e) {
        c("redrawSkip");
        return;
      }
      d.value = C(k());
      const t = g == null ? void 0 : g.value, l = t ? t.scrollTop : window.scrollY;
      await x(0), t ? t.scrollBy({ top: l - t.scrollTop }) : window.scrollTo({ top: l }), c("redraw");
    }
    const s = typeof ResizeObserver > "u" ? void 0 : new ResizeObserver(() => w());
    return onMounted(() => {
      w(), s == null || s.observe(f.value);
    }), onBeforeUnmount(() => s == null ? void 0 : s.unobserve(f.value)), watch([r, _], () => w(true)), watch([v, i], () => w()), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "wall",
      ref: f,
      class: "masonry-wall",
      style: normalizeStyle({ display: "flex", gap: `${unref(i)}px` })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(d.value, (l, a) => (openBlock(), createElementBlock("div", {
        key: a,
        class: "masonry-column",
        "data-index": a,
        style: normalizeStyle({
          display: "flex",
          "flex-basis": "0px",
          "flex-direction": "column",
          "flex-grow": 1,
          gap: `${unref(i)}px`,
          height: ["-webkit-max-content", "-moz-max-content", "max-content"],
          "min-width": 0
        })
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(l, (n, B) => (openBlock(), createElementBlock("div", {
          key: unref(W)(unref(r)[n], a, B, n),
          class: "masonry-item"
        }, [
          renderSlot(e.$slots, "default", {
            item: unref(r)[n],
            column: a,
            row: B,
            index: n
          }, () => [
            createTextVNode(toDisplayString(unref(r)[n]), 1)
          ])
        ]))), 128))
      ], 12, N))), 128))
    ], 4));
  }
});
var j = (() => {
  const o = U;
  return o.install = (c) => {
    c.component("MasonryWall", o);
  }, o;
})();
export {
  j as default
};
//# sourceMappingURL=@yeger_vue-masonry-wall.js.map
